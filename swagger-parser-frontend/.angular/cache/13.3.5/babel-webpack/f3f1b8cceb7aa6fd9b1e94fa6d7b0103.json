{"ast":null,"code":"import _asyncToGenerator from \"/Users/kamillahajrullina/WebstormProjects/diploma/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { finalize, tap } from 'rxjs/operators';\nlet UploadTaskComponent = class UploadTaskComponent {\n  constructor(storage, db) {\n    this.storage = storage;\n    this.db = db;\n  }\n\n  ngOnInit() {\n    this.startUpload();\n  }\n\n  startUpload() {\n    var _this = this;\n\n    // The storage path\n    const path = `test/${Date.now()}_${this.file.name}`; // Reference to storage bucket\n\n    const ref = this.storage.ref(path); // The main task\n\n    this.task = this.storage.upload(path, this.file); // Progress monitoring\n\n    this.percentage = this.task.percentageChanges();\n    this.snapshot = this.task.snapshotChanges().pipe(tap(console.log), // The file's download URL\n    finalize( /*#__PURE__*/_asyncToGenerator(function* () {\n      _this.downloadURL = yield ref.getDownloadURL().toPromise();\n\n      _this.db.collection('files').add({\n        downloadURL: _this.downloadURL,\n        path\n      });\n    })));\n  }\n\n  isActive(snapshot) {\n    return snapshot.state === 'running' && snapshot.bytesTransferred < snapshot.totalBytes;\n  }\n\n};\n\n__decorate([Input()], UploadTaskComponent.prototype, \"file\", void 0);\n\nUploadTaskComponent = __decorate([Component({\n  selector: 'upload-task',\n  templateUrl: './upload-task.component.html' // styleUrls: ['./upload-task.component.scss']\n\n})], UploadTaskComponent);\nexport { UploadTaskComponent };","map":{"version":3,"sources":["/Users/kamillahajrullina/WebstormProjects/diploma/src/app/upload-task/upload-task.component.ts"],"names":["__decorate","Component","Input","finalize","tap","UploadTaskComponent","constructor","storage","db","ngOnInit","startUpload","path","Date","now","file","name","ref","task","upload","percentage","percentageChanges","snapshot","snapshotChanges","pipe","console","log","downloadURL","getDownloadURL","toPromise","collection","add","isActive","state","bytesTransferred","totalBytes","prototype","selector","templateUrl"],"mappings":";AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,eAAjC;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,IAAIC,mBAAmB,GAAG,MAAMA,mBAAN,CAA0B;AAChDC,EAAAA,WAAW,CAACC,OAAD,EAAUC,EAAV,EAAc;AACrB,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKC,EAAL,GAAUA,EAAV;AACH;;AACDC,EAAAA,QAAQ,GAAG;AACP,SAAKC,WAAL;AACH;;AACDA,EAAAA,WAAW,GAAG;AAAA;;AACV;AACA,UAAMC,IAAI,GAAI,QAAOC,IAAI,CAACC,GAAL,EAAW,IAAG,KAAKC,IAAL,CAAUC,IAAK,EAAlD,CAFU,CAGV;;AACA,UAAMC,GAAG,GAAG,KAAKT,OAAL,CAAaS,GAAb,CAAiBL,IAAjB,CAAZ,CAJU,CAKV;;AACA,SAAKM,IAAL,GAAY,KAAKV,OAAL,CAAaW,MAAb,CAAoBP,IAApB,EAA0B,KAAKG,IAA/B,CAAZ,CANU,CAOV;;AACA,SAAKK,UAAL,GAAkB,KAAKF,IAAL,CAAUG,iBAAV,EAAlB;AACA,SAAKC,QAAL,GAAgB,KAAKJ,IAAL,CAAUK,eAAV,GAA4BC,IAA5B,CAAiCnB,GAAG,CAACoB,OAAO,CAACC,GAAT,CAApC,EAChB;AACAtB,IAAAA,QAAQ,iCAAC,aAAY;AACjB,MAAA,KAAI,CAACuB,WAAL,SAAyBV,GAAG,CAACW,cAAJ,GAAqBC,SAArB,EAAzB;;AACA,MAAA,KAAI,CAACpB,EAAL,CAAQqB,UAAR,CAAmB,OAAnB,EAA4BC,GAA5B,CAAgC;AAAEJ,QAAAA,WAAW,EAAE,KAAI,CAACA,WAApB;AAAiCf,QAAAA;AAAjC,OAAhC;AACH,KAHO,EAFQ,CAAhB;AAMH;;AACDoB,EAAAA,QAAQ,CAACV,QAAD,EAAW;AACf,WAAOA,QAAQ,CAACW,KAAT,KAAmB,SAAnB,IAAgCX,QAAQ,CAACY,gBAAT,GAA4BZ,QAAQ,CAACa,UAA5E;AACH;;AA1B+C,CAApD;;AA4BAlC,UAAU,CAAC,CACPE,KAAK,EADE,CAAD,EAEPG,mBAAmB,CAAC8B,SAFb,EAEwB,MAFxB,EAEgC,KAAK,CAFrC,CAAV;;AAGA9B,mBAAmB,GAAGL,UAAU,CAAC,CAC7BC,SAAS,CAAC;AACNmC,EAAAA,QAAQ,EAAE,aADJ;AAENC,EAAAA,WAAW,EAAE,8BAFP,CAGN;;AAHM,CAAD,CADoB,CAAD,EAM7BhC,mBAN6B,CAAhC;AAOA,SAASA,mBAAT","sourcesContent":["import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { finalize, tap } from 'rxjs/operators';\nlet UploadTaskComponent = class UploadTaskComponent {\n    constructor(storage, db) {\n        this.storage = storage;\n        this.db = db;\n    }\n    ngOnInit() {\n        this.startUpload();\n    }\n    startUpload() {\n        // The storage path\n        const path = `test/${Date.now()}_${this.file.name}`;\n        // Reference to storage bucket\n        const ref = this.storage.ref(path);\n        // The main task\n        this.task = this.storage.upload(path, this.file);\n        // Progress monitoring\n        this.percentage = this.task.percentageChanges();\n        this.snapshot = this.task.snapshotChanges().pipe(tap(console.log), \n        // The file's download URL\n        finalize(async () => {\n            this.downloadURL = await ref.getDownloadURL().toPromise();\n            this.db.collection('files').add({ downloadURL: this.downloadURL, path });\n        }));\n    }\n    isActive(snapshot) {\n        return snapshot.state === 'running' && snapshot.bytesTransferred < snapshot.totalBytes;\n    }\n};\n__decorate([\n    Input()\n], UploadTaskComponent.prototype, \"file\", void 0);\nUploadTaskComponent = __decorate([\n    Component({\n        selector: 'upload-task',\n        templateUrl: './upload-task.component.html'\n        // styleUrls: ['./upload-task.component.scss']\n    })\n], UploadTaskComponent);\nexport { UploadTaskComponent };\n"]},"metadata":{},"sourceType":"module"}